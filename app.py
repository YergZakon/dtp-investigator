import streamlit as st
import json
import anthropic
from typing import Dict, List

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
with open('investigation_knowledge.json', 'r', encoding='utf-8') as f:
    KNOWLEDGE_BASE = json.load(f)

def analyze_situation(case_details: Dict) -> Dict:
    """
    –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é Claude API –∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    """
    client = anthropic(api_key=st.secrets["ANTHROPIC_API_KEY"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –î–¢–ü –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–ª–∞–Ω —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
    
    –û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–µ–ª–∞:
    {json.dumps(case_details, ensure_ascii=False, indent=2)}
    
    –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
    {json.dumps(KNOWLEDGE_BASE, ensure_ascii=False, indent=2)}
    
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
    {{
        "situation_type": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏",
        "primary_actions": ["—Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"],
        "required_examinations": ["—Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–∏–∑"],
        "witness_questions": ["—Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–ø—Ä–æ—Å–∞"],
        "special_recommendations": ["–æ—Å–æ–±—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é"]
    }}
    """
    
    response = client.messages.create(
        model="claude-3-opus-20240229",
        max_tokens=2000,
        temperature=0,
        system="–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –î–¢–ü. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.",
        messages=[{"role": "user", "content": prompt}]
    )
    
    return json.loads(response.content[0].text)

def main():
    st.title("üöó –ü–æ–º–æ—â–Ω–∏–∫ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –ø–æ –î–¢–ü")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("–û —Å–∏—Å—Ç–µ–º–µ")
        st.info(
            "–°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –î–¢–ü –Ω–∞ –æ—Å–Ω–æ–≤–µ "
            "–≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –¥–µ–ª–∞ –∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–∞–∫—Ç–∏–∫–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."
        )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
    st.header("1. –û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        date_time = st.date_input("–î–∞—Ç–∞ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è")
        location = st.text_input("–ú–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è")
        incident_type = st.selectbox(
            "–¢–∏–ø –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è",
            [
                "–Ω–∞–µ–∑–¥ –Ω–∞ –ø–µ—à–µ—Ö–æ–¥–∞",
                "—Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ",
                "–æ–ø—Ä–æ–∫–∏–¥—ã–≤–∞–Ω–∏–µ",
                "–Ω–∞–µ–∑–¥ –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ",
                "–∏–Ω–æ–µ"
            ]
        )
    
    with col2:
        vehicle_present = st.checkbox("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –Ω–∞ –º–µ—Å—Ç–µ")
        victim_present = st.checkbox("–ü–æ—Ç–µ—Ä–ø–µ–≤—à–∏–π –Ω–∞ –º–µ—Å—Ç–µ")
        driver_present = st.checkbox("–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ")
    
    st.header("2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if vehicle_present:
        with st.expander("–°–≤–µ–¥–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ"):
            vehicle_type = st.text_input("–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –¢–°")
            vehicle_damage = st.text_area("–í–∏–¥–∏–º—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è")
    
    if victim_present:
        with st.expander("–°–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ—Ç–µ—Ä–ø–µ–≤—à–µ–º"):
            victim_condition = st.selectbox(
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä–ø–µ–≤—à–µ–≥–æ",
                ["—Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω", "–ø–æ–≥–∏–±", "–ª–µ–≥–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"]
            )
    
    if driver_present:
        with st.expander("–°–≤–µ–¥–µ–Ω–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ"):
            driver_condition = st.selectbox(
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è",
                ["–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–ø—å—è–Ω–µ–Ω–∏—è", "—Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω"]
            )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞
    with st.expander("–£—Å–ª–æ–≤–∏—è –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è"):
        weather = st.selectbox(
            "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
            ["—è—Å–Ω–æ", "–ø–∞—Å–º—É—Ä–Ω–æ", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥", "—Ç—É–º–∞–Ω"]
        )
        road_condition = st.selectbox(
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–≥–∏",
            ["—Å—É—Ö–æ–µ", "–º–æ–∫—Ä–æ–µ", "–≥–æ–ª–æ–ª–µ–¥", "—Å–Ω–µ–∂–Ω–æ–µ"]
        )
        lighting = st.selectbox(
            "–û—Å–≤–µ—â–µ–Ω–∏–µ",
            ["—Å–≤–µ—Ç–ª–æ–µ –≤—Ä–µ–º—è", "—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è", "—Å—É–º–µ—Ä–∫–∏"]
        )
    
    # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é", type="primary"):
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
        case_details = {
            "date_time": str(date_time),
            "location": location,
            "incident_type": incident_type,
            "participants": {
                "vehicle": {
                    "present": vehicle_present,
                    "details": {
                        "type": vehicle_type,
                        "damage": vehicle_damage
                    } if vehicle_present else None
                },
                "victim": {
                    "present": victim_present,
                    "condition": victim_condition if victim_present else None
                },
                "driver": {
                    "present": driver_present,
                    "condition": driver_condition if driver_present else None
                }
            },
            "conditions": {
                "weather": weather,
                "road": road_condition,
                "lighting": lighting
            }
        }
        
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é..."):
            try:
                analysis = analyze_situation(case_details)
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.header("3. –ü–ª–∞–Ω —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
                
                st.subheader("–¢–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏")
                st.info(analysis["situation_type"])
                
                st.subheader("–ü–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
                for action in analysis["primary_actions"]:
                    st.checkbox(action, key=f"action_{action}")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã")
                    for exam in analysis["required_examinations"]:
                        st.markdown(f"- {exam}")
                
                with col2:
                    st.subheader("–í–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–æ–ø—Ä–æ—Å–∞")
                    for question in analysis["witness_questions"]:
                        st.markdown(f"- {question}")
                
                if analysis.get("special_recommendations"):
                    st.subheader("–û—Å–æ–±—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                    for rec in analysis["special_recommendations"]:
                        st.markdown(f"- {rec}")
                
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

if __name__ == "__main__":
    main()
