import streamlit as st
import json
from anthropic import Anthropic
from typing import Dict, List
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
with open('investigation_knowledge.json', 'r', encoding='utf-8') as f:
    KNOWLEDGE_BASE = json.load(f)

def get_api_key() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    api_key = (
        os.getenv('ANTHROPIC_API_KEY') or  # –ò–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        st.secrets.get("ANTHROPIC_API_KEY", None) or  # –ò–∑ secrets Streamlit
        st.session_state.get('ANTHROPIC_API_KEY', None)  # –ò–∑ session state
    )
    
    if not api_key:
        # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if 'ANTHROPIC_API_KEY' not in st.session_state:
            st.session_state.ANTHROPIC_API_KEY = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Anthropic API –∫–ª—é—á:",
                type="password"
            )
        api_key = st.session_state.ANTHROPIC_API_KEY
    
    return api_key

def analyze_situation(case_details: Dict) -> Dict:
    """
    –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é Claude API –∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    """
    api_key = get_api_key()
    
    if not api_key:
        st.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á.")
        st.stop()
    
    client = Anthropic(api_key=api_key)
    
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –î–¢–ü –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–ª–∞–Ω —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
    
    –û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–µ–ª–∞:
    {json.dumps(case_details, ensure_ascii=False, indent=2)}
    
    –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:
    {json.dumps(KNOWLEDGE_BASE, ensure_ascii=False, indent=2)}
    
    –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:
    1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø —Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
    2. –°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    3. –ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
    4. –°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –¥–æ–ø—Ä–æ—Å–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

    –í–∞–∂–Ω–æ: –≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON (–≤—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã):
    {{
        "situation_type": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–∏—Ç—É–∞—Ü–∏–∏",
        "primary_actions": [
            "—Å–ø–∏—Å–æ–∫ –ø–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"
        ],
        "required_examinations": [
            "—Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–∏–∑"
        ],
        "interrogation_plan": {{
            "witness_questions": {{
                "general": [
                    "–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π"
                ],
                "specific": [
                    "–≤–æ–ø—Ä–æ—Å—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏"
                ],
                "technical": [
                    "–≤–æ–ø—Ä–æ—Å—ã –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö"
                ]
            }},
            "driver_questions": {{
                "pre_incident": [
                    "–≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ–±—ã—Ç–∏—è—Ö –¥–æ –î–¢–ü"
                ],
                "incident": [
                    "–≤–æ–ø—Ä–æ—Å—ã –æ —Å–∞–º–æ–º –î–¢–ü"
                ],
                "post_incident": [
                    "–≤–æ–ø—Ä–æ—Å—ã –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ—Å–ª–µ –î–¢–ü"
                ],
                "technical": [
                    "–≤–æ–ø—Ä–æ—Å—ã –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¢–°"
                ]
            }},
            "victim_questions": {{
                "pre_incident": [
                    "–≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ–±—ã—Ç–∏—è—Ö –¥–æ –î–¢–ü"
                ],
                "incident": [
                    "–≤–æ–ø—Ä–æ—Å—ã –æ —Å–∞–º–æ–º –î–¢–ü"
                ],
                "health": [
                    "–≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è"
                ]
            }}
        }},
        "special_recommendations": [
            "–æ—Å–æ–±—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é"
        ]
    }}

    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, —É—á–∏—Ç—ã–≤–∞—è:
    - –¢–∏–ø –î–¢–ü ({case_details['incident_type']})
    - –ù–∞–ª–∏—á–∏–µ/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤–æ–¥–∏—Ç–µ–ª—å: {case_details['participants']['driver']['present']}, 
      –ø–æ—Ç–µ—Ä–ø–µ–≤—à–∏–π: {case_details['participants']['victim']['present']})
    - –£—Å–ª–æ–≤–∏—è –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è (–ø–æ–≥–æ–¥–∞: {case_details['conditions']['weather']}, 
      –æ—Å–≤–µ—â–µ–Ω–∏–µ: {case_details['conditions']['lighting']})
    """
    
    try:
        response = client.messages.create(
            model="claude-3-opus-20240229",
            max_tokens=2000,
            temperature=0,
            system="–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å-–∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –î–¢–ü. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–ø—Ä–æ—Å–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –°—Ç—Ä–æ–≥–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ JSON –≤ –æ—Ç–≤–µ—Ç–µ.",
            messages=[{"role": "user", "content": prompt}]
        )
        
        try:
            response_text = response.content[0].text
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ, –µ—Å–ª–∏ –æ–Ω –æ–∫—Ä—É–∂–µ–Ω –¥—Ä—É–≥–∏–º —Ç–µ–∫—Å—Ç–æ–º
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤–µ—Å—å –æ—Ç–≤–µ—Ç
                return json.loads(response_text)
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø–æ—Ö–æ–∂—É—é –Ω–∞ JSON
                import re
                json_match = re.search(r'({[\s\S]*})', response_text)
                if json_match:
                    return json.loads(json_match.group(1))
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ")
                    
        except json.JSONDecodeError as e:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ API")
            st.error("–û—Ç–≤–µ—Ç API:")
            st.code(response_text, language="json")
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –≤ –æ—Ç–≤–µ—Ç–µ API: {str(e)}")
        except Exception as e:
            st.error("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API")
            st.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            st.error(f"–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: {str(e)}")
            st.error("–û—Ç–≤–µ—Ç API:")
            st.code(response_text, language="text")
            raise e
            
    except Exception as e:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
        st.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        st.error(f"–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: {str(e)}")
        raise e

    # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è,
    # –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")

def display_interrogation_plan(analysis: Dict):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ —á–µ–∫–±–æ–∫—Å–æ–≤
    """
    st.header("4. –ü–ª–∞–Ω –¥–æ–ø—Ä–æ—Å–æ–≤")
    
    interrogation_plan = analysis.get("interrogation_plan", {})
    
    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π
    witness_questions = interrogation_plan.get("witness_questions", {})
    with st.expander("üìù –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π", expanded=True):
        if witness_questions.get("general"):
            st.subheader("–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
            for q in witness_questions["general"]:
                st.markdown(f"‚Ä¢ {q}")
            
        if witness_questions.get("specific"):
            st.subheader("–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
            for q in witness_questions["specific"]:
                st.markdown(f"‚Ä¢ {q}")
            
        if witness_questions.get("technical"):
            st.subheader("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã")
            for q in witness_questions["technical"]:
                st.markdown(f"‚Ä¢ {q}")

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
    driver_questions = interrogation_plan.get("driver_questions", {})
    if driver_questions:
        with st.expander("üöó –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è", expanded=True):
            if driver_questions.get("pre_incident"):
                st.subheader("–°–æ–±—ã—Ç–∏—è –¥–æ –î–¢–ü")
                for q in driver_questions["pre_incident"]:
                    st.markdown(f"‚Ä¢ {q}")
            
            if driver_questions.get("incident"):
                st.subheader("–û –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏")
                for q in driver_questions["incident"]:
                    st.markdown(f"‚Ä¢ {q}")
            
            if driver_questions.get("post_incident"):
                st.subheader("–ü–æ—Å–ª–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è")
                for q in driver_questions["post_incident"]:
                    st.markdown(f"‚Ä¢ {q}")
            
            if driver_questions.get("technical"):
                st.subheader("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–°")
                for q in driver_questions["technical"]:
                    st.markdown(f"‚Ä¢ {q}")

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ—Ç–µ—Ä–ø–µ–≤—à–µ–≥–æ
    victim_questions = interrogation_plan.get("victim_questions", {})
    if victim_questions:
        with st.expander("ü§ï –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ—Ç–µ—Ä–ø–µ–≤—à–µ–≥–æ", expanded=True):
            if victim_questions.get("pre_incident"):
                st.subheader("–°–æ–±—ã—Ç–∏—è –¥–æ –î–¢–ü")
                for q in victim_questions["pre_incident"]:
                    st.markdown(f"‚Ä¢ {q}")
            
            if victim_questions.get("incident"):
                st.subheader("–û –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏")
                for q in victim_questions["incident"]:
                    st.markdown(f"‚Ä¢ {q}")
            
            if victim_questions.get("health"):
                st.subheader("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è")
                for q in victim_questions["health"]:
                    st.markdown(f"‚Ä¢ {q}")
    
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã"):
        all_questions = []
        
        if witness_questions:
            all_questions.append("\n=== –í–û–ü–†–û–°–´ –î–õ–Ø –°–í–ò–î–ï–¢–ï–õ–ï–ô ===\n")
            if witness_questions.get("general"):
                all_questions.append("\n–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
                all_questions.extend([f"‚Ä¢ {q}" for q in witness_questions["general"]])
            if witness_questions.get("specific"):
                all_questions.append("\n–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
                all_questions.extend([f"‚Ä¢ {q}" for q in witness_questions["specific"]])
            if witness_questions.get("technical"):
                all_questions.append("\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã:")
                all_questions.extend([f"‚Ä¢ {q}" for q in witness_questions["technical"]])
        
        if driver_questions:
            all_questions.append("\n=== –í–û–ü–†–û–°–´ –î–õ–Ø –í–û–î–ò–¢–ï–õ–Ø ===\n")
            if driver_questions.get("pre_incident"):
                all_questions.append("\n–°–æ–±—ã—Ç–∏—è –¥–æ –î–¢–ü:")
                all_questions.extend([f"‚Ä¢ {q}" for q in driver_questions["pre_incident"]])
            if driver_questions.get("incident"):
                all_questions.append("\n–û –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏:")
                all_questions.extend([f"‚Ä¢ {q}" for q in driver_questions["incident"]])
            if driver_questions.get("post_incident"):
                all_questions.append("\n–ü–æ—Å–ª–µ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:")
                all_questions.extend([f"‚Ä¢ {q}" for q in driver_questions["post_incident"]])
            if driver_questions.get("technical"):
                all_questions.append("\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¢–°:")
                all_questions.extend([f"‚Ä¢ {q}" for q in driver_questions["technical"]])
        
        if victim_questions:
            all_questions.append("\n=== –í–û–ü–†–û–°–´ –î–õ–Ø –ü–û–¢–ï–†–ü–ï–í–®–ï–ì–û ===\n")
            if victim_questions.get("pre_incident"):
                all_questions.append("\n–°–æ–±—ã—Ç–∏—è –¥–æ –î–¢–ü:")
                all_questions.extend([f"‚Ä¢ {q}" for q in victim_questions["pre_incident"]])
            if victim_questions.get("incident"):
                all_questions.append("\n–û –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–∏:")
                all_questions.extend([f"‚Ä¢ {q}" for q in victim_questions["incident"]])
            if victim_questions.get("health"):
                all_questions.append("\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è:")
                all_questions.extend([f"‚Ä¢ {q}" for q in victim_questions["health"]])
        
        questions_text = "\n".join(all_questions)
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã",
            data=questions_text,
            file_name="investigation_questions.txt",
            mime="text/plain"
        )
            
def main():
    st.title("üöó –ü–æ–º–æ—â–Ω–∏–∫ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è –ø–æ –î–¢–ü")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("–û —Å–∏—Å—Ç–µ–º–µ")
        st.info(
            "–°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –î–¢–ü –Ω–∞ –æ—Å–Ω–æ–≤–µ "
            "–≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤ –¥–µ–ª–∞ –∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ —Ç–∞–∫—Ç–∏–∫–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á –≤ —Å–∞–π–¥–±–∞—Ä–µ
        if st.button("–ò–∑–º–µ–Ω–∏—Ç—å API –∫–ª—é—á"):
            st.session_state.ANTHROPIC_API_KEY = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    api_key = get_api_key()
    if not api_key:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
    st.header("1. –û–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è")
    
    col1, col2 = st.columns(2)
    
    with col1:
        date_time = st.date_input("–î–∞—Ç–∞ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è")
        location = st.text_input("–ú–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è")
        incident_type = st.selectbox(
            "–¢–∏–ø –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è",
            [
                "–Ω–∞–µ–∑–¥ –Ω–∞ –ø–µ—à–µ—Ö–æ–¥–∞",
                "—Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ",
                "–æ–ø—Ä–æ–∫–∏–¥—ã–≤–∞–Ω–∏–µ",
                "–Ω–∞–µ–∑–¥ –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ",
                "–∏–Ω–æ–µ"
            ]
        )
    
    with col2:
        vehicle_present = st.checkbox("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –Ω–∞ –º–µ—Å—Ç–µ")
        victim_present = st.checkbox("–ü–æ—Ç–µ—Ä–ø–µ–≤—à–∏–π –Ω–∞ –º–µ—Å—Ç–µ")
        driver_present = st.checkbox("–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ")
    
    st.header("2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    vehicle_details = {}
    if vehicle_present:
        with st.expander("–°–≤–µ–¥–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ"):
            vehicle_type = st.text_input("–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –¢–°")
            vehicle_damage = st.text_area("–í–∏–¥–∏–º—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è")
            vehicle_details = {
                "type": vehicle_type,
                "damage": vehicle_damage
            }
    
    victim_details = {}
    if victim_present:
        with st.expander("–°–≤–µ–¥–µ–Ω–∏—è –æ –ø–æ—Ç–µ—Ä–ø–µ–≤—à–µ–º"):
            victim_condition = st.selectbox(
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–µ—Ä–ø–µ–≤—à–µ–≥–æ",
                ["—Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω", "–ø–æ–≥–∏–±", "–ª–µ–≥–∫–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è"]
            )
            victim_details = {"condition": victim_condition}
    
    driver_details = {}
    if driver_present:
        with st.expander("–°–≤–µ–¥–µ–Ω–∏—è –æ –≤–æ–¥–∏—Ç–µ–ª–µ"):
            driver_condition = st.selectbox(
                "–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è",
                ["–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–ø—å—è–Ω–µ–Ω–∏—è", "—Ç—Ä–∞–≤–º–∏—Ä–æ–≤–∞–Ω"]
            )
            driver_details = {"condition": driver_condition}
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞
    with st.expander("–£—Å–ª–æ–≤–∏—è –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è"):
        weather = st.selectbox(
            "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
            ["—è—Å–Ω–æ", "–ø–∞—Å–º—É—Ä–Ω–æ", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥", "—Ç—É–º–∞–Ω"]
        )
        road_condition = st.selectbox(
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Ä–æ–≥–∏",
            ["—Å—É—Ö–æ–µ", "–º–æ–∫—Ä–æ–µ", "–≥–æ–ª–æ–ª–µ–¥", "—Å–Ω–µ–∂–Ω–æ–µ"]
        )
        lighting = st.selectbox(
            "–û—Å–≤–µ—â–µ–Ω–∏–µ",
            ["—Å–≤–µ—Ç–ª–æ–µ –≤—Ä–µ–º—è", "—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è", "—Å—É–º–µ—Ä–∫–∏"]
        )
    
    # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é", type="primary"):
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å
        case_details = {
            "date_time": str(date_time),
            "location": location,
            "incident_type": incident_type,
            "participants": {
                "vehicle": {
                    "present": vehicle_present,
                    "details": vehicle_details if vehicle_present else None
                },
                "victim": {
                    "present": victim_present,
                    "details": victim_details if victim_present else None
                },
                "driver": {
                    "present": driver_present,
                    "details": driver_details if driver_present else None
                }
            },
            "conditions": {
                "weather": weather,
                "road": road_condition,
                "lighting": lighting
            }
        }
        
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é..."):
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ session state
                st.session_state.analysis_result = analyze_situation(case_details)
                analysis = st.session_state.analysis_result
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.header("3. –ü–ª–∞–Ω —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
                
                st.subheader("–¢–∏–ø —Å–∏—Ç—É–∞—Ü–∏–∏")
                st.info(analysis["situation_type"])
                
                # –ü–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                with st.expander("üéØ –ü–µ—Ä–≤–æ–æ—á–µ—Ä–µ–¥–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", expanded=True):
                    for action in analysis["primary_actions"]:
                        st.checkbox(action, key=f"action_{action}")
                
                # –≠–∫—Å–ø–µ—Ä—Ç–∏–∑—ã
                with st.expander("üîç –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã", expanded=True):
                    for exam in analysis["required_examinations"]:
                        st.markdown(f"- {exam}")
                
                # –ü–ª–∞–Ω –¥–æ–ø—Ä–æ—Å–æ–≤
                display_interrogation_plan(analysis)
                
                # –û—Å–æ–±—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if analysis.get("special_recommendations"):
                    with st.expander("üí° –û—Å–æ–±—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", expanded=True):
                        for rec in analysis["special_recommendations"]:
                            st.markdown(f"- {rec}")
                
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
                st.exception(e)  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏

if __name__ == "__main__":
    main()